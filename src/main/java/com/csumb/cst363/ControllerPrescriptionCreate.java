package com.csumb.cst363;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import java.sql.*;


@Controller
public class ControllerPrescriptionCreate {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    /*
     * Doctor requests blank form for a new prescription.
     */
    @GetMapping("/prescription/new")
    public String newPrescription(Model model) {
        model.addAttribute("prescription", new Prescription());
        return "prescription_create";
    }

    /*
     * Process the new prescription form.
     * 1. Validate that Doctor SSN exists and matches Doctor Name.
     * 2. Validate that Patient SSN exists and matches Patient Name.
     * 3. Validate that Drug name exists.
     * 4. Insert new prescription.
     * 5. If error, return error message and the prescription form
     * 6. Otherwise, return the prescription with the rxid number that was generated by the database.
     */

    @PostMapping("/prescription")
    public String newPrescription(Prescription p, Model model) {
        try (Connection conn = getConnection()) {
            String sql = "SELECT COUNT(*) FROM Doctor WHERE ssn = ? AND last_name = ? AND first_name = ?";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setString(1, p.getDoctor_ssn());
            statement.setString(2, p.getDoctorLastName());
            statement.setString(3, p.getDoctorFirstName());
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next() && resultSet.getInt(1) == 0) {
                model.addAttribute("message", "Invalid Doctor Details.");
                return "prescription_create";
            }

            sql = "SELECT COUNT(*) FROM Patient WHERE ssn = ? AND last_name = ? AND first_name = ?";
            statement = conn.prepareStatement(sql);
            statement.setString(1, p.getPatient_ssn());
            statement.setString(2, p.getPatientLastName());
            statement.setString(3, p.getPatientFirstName());
            resultSet = statement.executeQuery();
            if (resultSet.next() && resultSet.getInt(1) == 0) {
                model.addAttribute("message", "Invalid Patient Details.");
                return "prescription_create";
            }

            sql = "SELECT COUNT(*) FROM Drug WHERE trade_name = ?";
            statement = conn.prepareStatement(sql);
            statement.setString(1, p.getDrugName());
            resultSet = statement.executeQuery();
            if (resultSet.next() && resultSet.getInt(1) == 0) {
                model.addAttribute("message", "Invalid Drug Details.");
                return "prescription_create";
            }

            if (p.getQuantity() <= 0 || p.getQuantity() > 1000) {
                model.addAttribute("message", "Invalid Quantity. Quantity should be between 1 and 1000.");
                return "prescription_create";
            }

            sql = "INSERT INTO Prescription (Doctor_SSN, Patient_SSN, PatientFirstName, PatientLastName, DoctorFirstName, DoctorLastName, DrugName, Quantity) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            statement = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            statement.setString(1, p.getDoctor_ssn());
            statement.setString(2, p.getPatient_ssn());
            statement.setString(3, p.getPatientFirstName());
            statement.setString(4, p.getPatientLastName());
            statement.setString(5, p.getDoctorFirstName());
            statement.setString(6, p.getDoctorLastName());
            statement.setString(7, p.getDrugName());
            statement.setInt(8, p.getQuantity());

            int affectedRows = statement.executeUpdate();

            if (affectedRows == 0) {
                model.addAttribute("message", "Creating prescription failed, no rows affected.");
                return "prescription_create";
            }

            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    p.setRxid(generatedKeys.getString(1));
                } else {
                    throw new SQLException("Creating prescription failed, no ID obtained.");
                }
            }

            model.addAttribute("message", "Prescription created.");
            model.addAttribute("prescription", p);
            return "prescription_show";
        } catch (SQLException e) {
            model.addAttribute("message", "Error occurred: " + e.getMessage());
            return "prescription_create";
        }
    }

    /*
     * Return JDBC Connection using jdbcTemplate in Spring Server
     */
    private Connection getConnection() throws SQLException {
        Connection conn = jdbcTemplate.getDataSource().getConnection();
        return conn;
    }

}
